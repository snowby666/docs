{
  "openapi": "3.0.1",
  "info": {
    "title": "Electron Hub API",
    "description": "Unified API platform integrating 200+ AI models for chat, image generation, embeddings, and more.",
    "version": "1.0.0",
    "contact": {
      "name": "Electron Hub Support",
      "email": "support@electronhub.ai",
      "url": "https://discord.com/invite/apUUqbxCBQ"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.electronhub.ai/v1",
      "description": "Production API v1"
    },
    {
      "url": "https://api.electronhub.ai",
      "description": "Production API"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/models": {
      "get": {
        "summary": "List Models",
        "description": "List all available models",
        "operationId": "listModels",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model}": {
      "get": {
        "summary": "Get Model",
        "description": "Retrieve information about a specific model",
        "operationId": "getModel",
        "security": [],
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Model ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        }
      }
    },
    "/chat/completions": {
      "post": {
        "summary": "Create Chat Completion",
        "description": "Create a chat completion using OpenAI format",
        "operationId": "createChatCompletion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/messages": {
      "post": {
        "summary": "Create Message (Anthropic)",
        "description": "Create a message using Anthropic format",
        "operationId": "createMessage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/responses": {
      "post": {
        "summary": "Create Response (OpenAI)",
        "description": "Create a response using OpenAI's new response format",
        "operationId": "createResponse",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOutput"
                }
              }
            }
          }
        }
      }
    },
    "/images/generations": {
      "post": {
        "summary": "Generate Images",
        "description": "Generate images from text prompts",
        "operationId": "generateImages",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/images/edits": {
      "post": {
        "summary": "Edit Images",
        "description": "Edit images with prompts",
        "operationId": "editImages",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ImageEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/embeddings": {
      "post": {
        "summary": "Create Embeddings",
        "description": "Create text embeddings",
        "operationId": "createEmbeddings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/moderations": {
      "post": {
        "summary": "Create Moderation",
        "description": "Check content for moderation",
        "operationId": "createModeration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "summary": "Get Usage",
        "description": "Get current user usage statistics and account information",
        "operationId": "getUsage",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/logs": {
      "get": {
        "summary": "Get User Logs",
        "description": "Get recent API request logs for the authenticated user",
        "operationId": "getUserLogs",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLogEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy": {
      "get": {
        "summary": "List Proxy Keys",
        "description": "Get all proxy keys for the authenticated user",
        "operationId": "listProxyKeys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProxyKey"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete All Proxy Keys",
        "description": "Delete all proxy keys for the authenticated user",
        "operationId": "deleteAllProxyKeys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proxy keys deleted"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/create": {
      "post": {
        "summary": "Create Proxy Key",
        "description": "Create a new proxy key with specified permissions and limits",
        "operationId": "createProxyKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProxyKeyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Proxy key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyKey"
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/{proxy_key}": {
      "get": {
        "summary": "Get Proxy Key",
        "description": "Retrieve information about a specific proxy key",
        "operationId": "getProxyKey",
        "parameters": [
          {
            "name": "proxy_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Proxy key ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyKey"
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/update/{proxy_key}": {
      "post": {
        "summary": "Update Proxy Key",
        "description": "Update an existing proxy key's configuration",
        "operationId": "updateProxyKey",
        "parameters": [
          {
            "name": "proxy_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Proxy key ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProxyKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Proxy key updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proxy key updated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/toggle/{proxy_key}": {
      "post": {
        "summary": "Toggle Proxy Key Status",
        "description": "Enable or disable a proxy key",
        "operationId": "toggleProxyKey",
        "parameters": [
          {
            "name": "proxy_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Proxy key ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Proxy key status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proxy key status updated"
                    },
                    "status": {
                      "type": "boolean",
                      "description": "New status of the proxy key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/delete/{proxy_key}": {
      "delete": {
        "summary": "Delete Proxy Key",
        "description": "Delete a specific proxy key",
        "operationId": "deleteProxyKey",
        "parameters": [
          {
            "name": "proxy_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Proxy key ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Proxy key deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proxy key deleted"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/proxy/validate": {
      "post": {
        "summary": "Validate Proxy Key Access",
        "description": "Validate if a proxy key can access a specific model from the current IP",
        "operationId": "validateProxyKeyAccess",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "Model to validate access for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/key/regen": {
      "get": {
        "summary": "Regenerate API Key",
        "description": "Generate a new API key for the authenticated user",
        "operationId": "regenerateApiKey",
        "responses": {
          "200": {
            "description": "New API key generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The new API key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your API key (starts with 'ek-')"
      }
    },
    "schemas": {
      "Model": {
        "type": "object",
        "required": ["name", "description", "id", "object", "created", "owned_by", "tokens", "pricing", "endpoints", "premium_model"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable model name"
          },
          "description": {
            "type": "string",
            "description": "Model description"
          },
          "id": {
            "type": "string",
            "description": "Model identifier"
          },
          "object": {
            "type": "string",
            "example": "model"
          },
          "created": {
            "type": "integer",
            "description": "Creation timestamp"
          },
          "owned_by": {
            "type": "string",
            "description": "Organization that owns the model"
          },
          "tokens": {
            "type": "integer",
            "description": "Context length of the model (maximum combined input and output tokens)"
          },
          "pricing": {
            "type": "object",
            "properties": {
              "input": {
                "type": "number",
                "description": "Cost per input token"
              },
              "output": {
                "type": "number",
                "description": "Cost per output token"
              }
            }
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported API endpoints"
          },
          "premium_model": {
            "type": "boolean",
            "description": "Whether this is a premium model"
          },
          "voices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available voices for text-to-speech models"
          },
          "sizes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available image sizes for image generation models"
          },
          "qualities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available quality levels for image generation models"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available tags for music generation models"
          },
          "styles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available styles for video generation models"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for chat completion models"
          }
        }
      },
      "ListModelsResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "example": "list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        }
      },
      "ChatCompletionRequest": {
        "type": "object",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "description": "Model to use for completion",
            "example": "gpt-4o"
          },
          "messages": {
            "type": "array",
            "description": "List of messages",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "stream": {
            "type": "boolean",
            "default": false,
            "description": "Enable streaming"
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum tokens to generate"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "description": "Sampling temperature"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "description": "Nucleus sampling"
          },
          "top_k": {
            "type": "integer",
            "description": "Top-k sampling"
          },
          "frequency_penalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "default": 0
          },
          "tools": {
            "type": "array",
            "description": "List of tools",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "tool_choice": {
            "oneOf": [
              {"type": "string", "enum": ["none", "auto"]},
              {"$ref": "#/components/schemas/ToolChoice"}
            ]
          },
          "web_search": {
            "type": "boolean",
            "default": false,
            "description": "Enable web search"
          },
          "thinking": {
            "$ref": "#/components/schemas/ThinkingConfig"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "description": "Reasoning effort level"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant", "tool"]
          },
          "content": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContentPart"
                }
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the message author"
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        }
      },
      "ContentPart": {
        "oneOf": [
          {"$ref": "#/components/schemas/TextContentPart"},
          {"$ref": "#/components/schemas/ImageContentPart"}
        ]
      },
      "TextContentPart": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "ImageContentPart": {
        "type": "object",
        "required": ["type", "image_url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image_url"]
          },
          "image_url": {
            "oneOf": [
              {"type": "string"},
              {"$ref": "#/components/schemas/ImageUrl"}
            ]
          }
        }
      },
      "ImageUrl": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "detail": {
            "type": "string",
            "enum": ["low", "high", "auto"],
            "default": "auto"
          }
        }
      },
      "Tool": {
        "type": "object",
        "required": ["type", "function"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "$ref": "#/components/schemas/FunctionDefinition"
          }
        }
      },
      "FunctionDefinition": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          }
        }
      },
      "ToolChoice": {
        "type": "object",
        "required": ["type", "function"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "required": ["id", "type", "function"],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              }
            }
          }
        }
      },
      "ThinkingConfig": {
        "type": "object",
        "required": ["type", "budget_tokens"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["enabled"]
          },
          "budget_tokens": {
            "type": "integer",
            "description": "Token budget for thinking"
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "required": ["id", "object", "created", "model", "choices"],
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "chat.completion"
          },
          "created": {
            "type": "integer"
          },
          "model": {
            "type": "string"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChoice"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          }
        }
      },
      "ChatChoice": {
        "type": "object",
        "required": ["index", "message"],
        "properties": {
          "index": {
            "type": "integer"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "finish_reason": {
            "type": "string",
            "enum": ["stop", "length", "content_filter", "tool_calls", "function_call"]
          }
        }
      },
      "Usage": {
        "type": "object",
        "required": ["prompt_tokens", "completion_tokens", "total_tokens"],
        "properties": {
          "prompt_tokens": {
            "type": "integer"
          },
          "completion_tokens": {
            "type": "integer"
          },
          "total_tokens": {
            "type": "integer"
          }
        }
      },
      "MessageRequest": {
        "type": "object",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "claude-3-5-sonnet-20241022"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnthropicMessage"
            }
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum tokens to generate"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "top_p": {
            "type": "number"
          },
          "top_k": {
            "type": "integer"
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "system": {
            "type": "string",
            "description": "System prompt"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnthropicTool"
            }
          },
          "tool_choice": {
            "$ref": "#/components/schemas/AnthropicToolChoice"
          },
          "thinking": {
            "$ref": "#/components/schemas/ThinkingConfig"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": ["low", "medium", "high"]
          }
        }
      },
      "AnthropicMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user", "assistant"]
          },
          "content": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnthropicContentPart"
                }
              }
            ]
          }
        }
      },
      "AnthropicContentPart": {
        "oneOf": [
          {"$ref": "#/components/schemas/AnthropicTextContent"},
          {"$ref": "#/components/schemas/AnthropicImageContent"},
          {"$ref": "#/components/schemas/AnthropicToolUseContent"},
          {"$ref": "#/components/schemas/AnthropicToolResultContent"}
        ]
      },
      "AnthropicTextContent": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "AnthropicImageContent": {
        "type": "object",
        "required": ["type", "source"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image"]
          },
          "source": {
            "$ref": "#/components/schemas/AnthropicImageSource"
          }
        }
      },
      "AnthropicImageSource": {
        "type": "object",
        "required": ["type", "media_type", "data"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["base64"]
          },
          "media_type": {
            "type": "string",
            "example": "image/jpeg"
          },
          "data": {
            "type": "string",
            "description": "Base64 encoded image data"
          }
        }
      },
      "AnthropicToolUseContent": {
        "type": "object",
        "required": ["type", "id", "name", "input"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["tool_use"]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "input": {
            "type": "object"
          }
        }
      },
      "AnthropicToolResultContent": {
        "type": "object",
        "required": ["type", "tool_use_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["tool_result"]
          },
          "tool_use_id": {
            "type": "string"
          },
          "content": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnthropicContentPart"
                }
              }
            ]
          },
          "is_error": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "AnthropicTool": {
        "type": "object",
        "required": ["name", "input_schema"],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "input_schema": {
            "type": "object"
          }
        }
      },
      "AnthropicToolChoice": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["auto", "any"]
          },
          {
            "type": "object",
            "required": ["type", "name"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["tool"]
              },
              "name": {
                "type": "string"
              }
            }
          }
        ]
      },
      "MessageResponse": {
        "type": "object",
        "required": ["id", "type", "role", "content", "model", "stop_reason", "usage"],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["message"]
          },
          "role": {
            "type": "string",
            "enum": ["assistant"]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnthropicContentPart"
            }
          },
          "model": {
            "type": "string"
          },
          "stop_reason": {
            "type": "string",
            "enum": ["end_turn", "max_tokens", "stop_sequence", "tool_use"],
            "nullable": true
          },
          "stop_sequence": {
            "type": "string",
            "nullable": true
          },
          "usage": {
            "$ref": "#/components/schemas/AnthropicUsage"
          }
        }
      },
      "AnthropicUsage": {
        "type": "object",
        "required": ["input_tokens", "output_tokens"],
        "properties": {
          "input_tokens": {
            "type": "integer"
          },
          "output_tokens": {
            "type": "integer"
          }
        }
      },
      "ResponseRequest": {
        "type": "object",
        "required": ["model", "input"],
        "properties": {
          "model": {
            "type": "string",
            "example": "gpt-4o"
          },
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            ]
          },
          "instructions": {
            "type": "string",
            "description": "System instructions"
          },
          "max_output_tokens": {
            "type": "integer",
            "description": "Maximum output tokens"
          },
          "temperature": {
            "type": "number",
            "default": 1.0
          },
          "top_p": {
            "type": "number",
            "default": 1.0
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseTool"
            }
          },
          "tool_choice": {
            "oneOf": [
              {"type": "string", "enum": ["auto", "none"]},
              {"type": "object"}
            ],
            "default": "auto"
          },
          "web_search": {
            "type": "boolean",
            "default": false
          },
          "reasoning": {
            "$ref": "#/components/schemas/ReasoningConfig"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ResponseMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user", "assistant", "system"]
          },
          "content": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseContentPart"
                }
              }
            ]
          }
        }
      },
      "ResponseContentPart": {
        "oneOf": [
          {"$ref": "#/components/schemas/InputTextContentPart"},
          {"$ref": "#/components/schemas/InputImageContentPart"},
          {"$ref": "#/components/schemas/OutputTextContentPart"}
        ]
      },
      "InputTextContentPart": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["input_text"]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "InputImageContentPart": {
        "type": "object",
        "required": ["type", "image_url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["input_image"]
          },
          "image_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "OutputTextContentPart": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["output_text"]
          },
          "text": {
            "type": "string"
          },
          "annotations": {
            "type": "array",
            "items": {}
          }
        }
      },
      "ResponseTool": {
        "oneOf": [
          {"$ref": "#/components/schemas/FunctionTool"},
          {"$ref": "#/components/schemas/WebSearchTool"}
        ]
      },
      "FunctionTool": {
        "type": "object",
        "required": ["type", "function"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "$ref": "#/components/schemas/FunctionDefinition"
          }
        }
      },
      "WebSearchTool": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["web_search"]
          },
          "web_search": {
            "type": "object"
          }
        }
      },
      "ReasoningConfig": {
        "type": "object",
        "properties": {
          "effort": {
            "type": "string",
            "enum": ["low", "medium", "high"]
          },
          "summary": {
            "type": "boolean"
          }
        }
      },
      "ResponseOutput": {
        "type": "object",
        "required": ["id", "object", "created_at", "status", "model", "output"],
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": ["response"]
          },
          "created_at": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "completed", "incomplete", "errored"]
          },
          "model": {
            "type": "string"
          },
          "output": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseOutputItem"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/ResponseUsage"
          }
        }
      },
      "ResponseOutputItem": {
        "type": "object",
        "required": ["id", "type", "status"],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["message", "tool_call", "tool_result", "reasoning"]
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "completed", "incomplete", "errored"]
          },
          "role": {
            "type": "string",
            "enum": ["assistant"]
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTextContentPart"
            }
          }
        }
      },
      "ResponseUsage": {
        "type": "object",
        "required": ["input_tokens", "output_tokens", "total_tokens"],
        "properties": {
          "input_tokens": {
            "type": "integer"
          },
          "input_tokens_details": {
            "type": "object"
          },
          "output_tokens": {
            "type": "integer"
          },
          "output_tokens_details": {
            "type": "object"
          },
          "total_tokens": {
            "type": "integer"
          }
        }
      },
      "ImageGenerationRequest": {
        "type": "object",
        "required": ["model", "prompt"],
        "properties": {
          "model": {
            "type": "string",
            "example": "dall-e-3"
          },
          "prompt": {
            "type": "string",
            "description": "Text description of the desired image"
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 1,
            "description": "Number of images to generate"
          },
          "quality": {
            "type": "string",
            "enum": ["standard", "hd"],
            "default": "standard"
          },
          "size": {
            "type": "string",
            "enum": ["256x256", "512x512", "1024x1024", "1792x1024", "1024x1792"],
            "default": "1024x1024"
          },
          "response_format": {
            "type": "string",
            "enum": ["url", "b64_json"],
            "default": "url"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "Whether to make the image publicly accessible"
          }
        }
      },
      "ImageEditRequest": {
        "type": "object",
        "required": ["image", "prompt", "model"],
        "properties": {
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image to edit"
          },
          "prompt": {
            "type": "string",
            "description": "A text description of the desired image"
          },
          "model": {
            "type": "string",
            "example": "dall-e-2"
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 1
          },
          "size": {
            "type": "string",
            "enum": ["256x256", "512x512", "1024x1024"],
            "default": "1024x1024"
          },
          "response_format": {
            "type": "string",
            "enum": ["url", "b64_json"],
            "default": "url"
          }
        }
      },
      "ImageResponse": {
        "type": "object",
        "required": ["created", "data"],
        "properties": {
          "created": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageData"
            }
          }
        }
      },
      "ImageData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "b64_json": {
            "type": "string"
          },
          "revised_prompt": {
            "type": "string"
          }
        }
      },
      "EmbeddingRequest": {
        "type": "object",
        "required": ["model", "input"],
        "properties": {
          "model": {
            "type": "string",
            "example": "text-embedding-ada-002"
          },
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {"type": "string"}
              }
            ],
            "description": "Input text to embed"
          },
          "encoding_format": {
            "type": "string",
            "enum": ["float", "base64"],
            "default": "float"
          },
          "dimensions": {
            "type": "integer",
            "description": "Number of dimensions for the embedding"
          }
        }
      },
      "EmbeddingResponse": {
        "type": "object",
        "required": ["object", "data", "model", "usage"],
        "properties": {
          "object": {
            "type": "string",
            "example": "list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingData"
            }
          },
          "model": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/EmbeddingUsage"
          }
        }
      },
      "EmbeddingData": {
        "type": "object",
        "required": ["object", "embedding", "index"],
        "properties": {
          "object": {
            "type": "string",
            "example": "embedding"
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "index": {
            "type": "integer"
          }
        }
      },
      "EmbeddingUsage": {
        "type": "object",
        "required": ["prompt_tokens", "total_tokens"],
        "properties": {
          "prompt_tokens": {
            "type": "integer"
          },
          "total_tokens": {
            "type": "integer"
          }
        }
      },
      "ModerationRequest": {
        "type": "object",
        "required": ["model", "input"],
        "properties": {
          "model": {
            "type": "string",
            "example": "text-moderation-latest"
          },
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {"type": "string"},
                    {"type": "object"}
                  ]
                }
              }
            ]
          }
        }
      },
      "ModerationResponse": {
        "type": "object",
        "required": ["id", "model", "results"],
        "properties": {
          "id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModerationResult"
            }
          }
        }
      },
      "ModerationResult": {
        "type": "object",
        "required": ["flagged", "categories", "category_scores"],
        "properties": {
          "flagged": {
            "type": "boolean"
          },
          "categories": {
            "type": "object",
            "properties": {
              "sexual": {"type": "boolean"},
              "hate": {"type": "boolean"},
              "harassment": {"type": "boolean"},
              "self-harm": {"type": "boolean"},
              "sexual/minors": {"type": "boolean"},
              "hate/threatening": {"type": "boolean"},
              "violence/graphic": {"type": "boolean"},
              "self-harm/intent": {"type": "boolean"},
              "self-harm/instructions": {"type": "boolean"},
              "harassment/threatening": {"type": "boolean"},
              "violence": {"type": "boolean"}
            }
          },
          "category_scores": {
            "type": "object",
            "properties": {
              "sexual": {"type": "number"},
              "hate": {"type": "number"},
              "harassment": {"type": "number"},
              "self-harm": {"type": "number"},
              "sexual/minors": {"type": "number"},
              "hate/threatening": {"type": "number"},
              "violence/graphic": {"type": "number"},
              "self-harm/intent": {"type": "number"},
              "self-harm/instructions": {"type": "number"},
              "harassment/threatening": {"type": "number"},
              "violence": {"type": "number"}
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "object",
            "required": ["message", "type"],
            "properties": {
              "message": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "code": {
                "type": "string"
              }
            }
          }
        }
      },
      "UsageResponse": {
        "type": "object",
        "required": ["subscription", "credits", "usage", "history", "endpoints"],
        "properties": {
          "subscription": {
            "type": "string",
            "description": "Current subscription plan"
          },
          "credits": {
            "type": "integer",
            "description": "Remaining credits"
          },
          "usage": {
            "type": "object",
            "required": ["input_tokens", "output_tokens"],
            "properties": {
              "input_tokens": {
                "type": "integer",
                "description": "Total input tokens used"
              },
              "output_tokens": {
                "type": "integer",
                "description": "Total output tokens used"
              }
            }
          },
          "history": {
            "type": "array",
            "description": "Daily usage history",
            "items": {
              "type": "object",
              "required": ["date", "requests"],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Date in YYYY-MM-DD format"
                },
                "requests": {
                  "type": "integer",
                  "description": "Number of requests made on this date"
                }
              }
            }
          },
          "endpoints": {
            "type": "object",
            "description": "Usage count by endpoint",
            "properties": {
              "chat.completions": {
                "type": "integer",
                "description": "Chat completion requests"
              },
              "images.generations": {
                "type": "integer",
                "description": "Image generation requests"
              },
              "images.edits": {
                "type": "integer",
                "description": "Image edit requests"
              },
              "videos.generations": {
                "type": "integer",
                "description": "Video generation requests"
              }
            }
          }
        }
      },
      "ProxyKey": {
        "type": "object",
        "required": ["name", "expires_at", "allocated_ammount"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the proxy key",
            "maxLength": 25
          },
          "expires_at": {
            "type": "integer",
            "description": "Expiration timestamp (-1 for no expiration)"
          },
          "allocated_ammount": {
            "type": "number",
            "description": "Allocated credit amount",
            "minimum": 0
          },
          "model_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed models",
            "default": []
          },
          "ip_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed IP addresses or CIDR blocks",
            "default": []
          },
          "used_ammount": {
            "type": "number",
            "description": "Amount of credits used",
            "readOnly": true
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the proxy key is active",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "description": "The proxy key value",
            "readOnly": true
          },
          "created_at": {
            "type": "integer",
            "description": "Creation timestamp",
            "readOnly": true
          },
          "last_used": {
            "type": "integer",
            "description": "Last usage timestamp",
            "readOnly": true
          }
        }
      },
      "CreateProxyKeyRequest": {
        "type": "object",
        "required": ["name", "expires_at", "allocated_ammount"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the proxy key",
            "maxLength": 25,
            "example": "My API Key"
          },
          "expires_at": {
            "type": "integer",
            "description": "Expiration timestamp in seconds (-1 for no expiration)",
            "example": 1735689600
          },
          "allocated_ammount": {
            "type": "number",
            "description": "Allocated credit amount",
            "minimum": 0,
            "example": 10.0
          },
          "model_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed models (empty for all models)",
            "example": ["gpt-4o", "claude-3-5-sonnet-20241022"],
            "default": []
          },
          "ip_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed IP addresses or CIDR blocks (empty for all IPs)",
            "example": ["192.168.1.0/24", "203.0.113.42"],
            "default": []
          }
        }
      },
      "UpdateProxyKeyRequest": {
        "type": "object",
        "required": ["name", "expires_at", "allocated_ammount"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the proxy key",
            "maxLength": 25,
            "example": "Updated API Key"
          },
          "expires_at": {
            "type": "integer",
            "description": "Expiration timestamp in seconds (-1 for no expiration)",
            "example": 1735689600
          },
          "allocated_ammount": {
            "type": "number",
            "description": "Allocated credit amount",
            "minimum": 0,
            "example": 15.0
          },
          "model_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed models (empty for all models)",
            "example": ["gpt-4o", "claude-3-5-sonnet-20241022"],
            "default": []
          },
          "ip_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed IP addresses or CIDR blocks (empty for all IPs)",
            "example": ["192.168.1.0/24", "203.0.113.42"],
            "default": []
          }
        }
      },
      "UserLogEntry": {
        "type": "object",
        "required": ["key", "model", "route", "credits", "timestamp", "status", "ip"],
        "properties": {
          "key": {
            "type": "string",
            "description": "API key used for the request",
            "example": "ek-abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567"
          },
          "model": {
            "type": "string",
            "description": "Model used for the request",
            "example": "gpt-4o"
          },
          "route": {
            "type": "string",
            "description": "API endpoint used",
            "example": "chat.completions"
          },
          "credits": {
            "type": "number",
            "description": "Credits consumed by the request",
            "example": 0.0052320000000000005
          },
          "timestamp": {
            "type": "integer",
            "description": "Unix timestamp of the request",
            "example": 1747381627
          },
          "status": {
            "type": "string",
            "enum": ["success", "cancelled", "error"],
            "description": "Status of the request",
            "example": "success"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the request",
            "example": "2001:ee0:d780:9820:9115:b97:7e06:bb5b"
          },
          "input_tokens": {
            "type": "integer",
            "description": "Number of input tokens (for text models)",
            "example": 44
          },
          "output_tokens": {
            "type": "integer",
            "description": "Number of output tokens (for text models)",
            "example": 340
          }
        }
      }
    }
  }
}